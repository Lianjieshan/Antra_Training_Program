
--Section A
--1.In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
--I prefer use Join, because a subquery is easier to write, but a joint might be better optimized by the server. 
--For example a Left Outer join typically works faster because servers optimize it.

--2.What is CTE and when to use it?
--A Common Table Expression (CTE) is the result set of a query which exists temporarily and for use only within the context of a larger query.
--There are 3 conditions that is better to choose 
--a Needing to reference a derived table multiple times in a single query
--b An alternative to creating a view in the database
--c Performing the same calculation multiple times over across multiple query components 

--3.What are Table Variables? What is their scope and where are they created in SQL Server?
--The table variable is a special type of the local variable that helps to store data temporarily, similar to the temp table in SQL Server. 
--Table variable is scoped to the stored procedure, batch, or user-defined function just like any local variable you create with a DECLARE statement.
--Table variables are stored in the tempdb database. 

--4.What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
--Truncate reseeds identity values, whereas delete doesn't.
--Truncate removes all records and doesn't fire triggers.
--Truncate is faster compared to delete as it makes less use of the transaction log.
--Truncate is not possible when a table is referenced by a Foreign Key or tables are used in replication or with indexed views.
--Thus, Truncate will have a better performance due to its faster characteristic

--5.What is Identity column? How does DELETE and TRUNCATE affect it?
--An identity column is a column in a database table that is made up of values generated by the database.
--DELETE retains the identity and does not reset it to the seed value. 
--Truncate command reset the identity to its seed value.

--6.What is difference between “delete from table_name” and “truncate table table_name”?
--Delete can be used to remove all rows or only a subset of rows. Truncate removes all rows.

--Sectoin B
USE [Northwind]
go
--1.List all cities that have both Employees and Customers.
select distinct e.City
from Employees e inner join Customers c
on e.City = c.City

--2.List all cities that have Customers but no Employee.
--a.Use sub-query
select distinct city
from 
(select e.EmployeeID, c.CustomerID, c.City
from Employees e right join Customers c
on e.City = c.City) dt
where dt.EmployeeID is null 

--b.Do not use sub-query
with CTE 
as (
select e.EmployeeID, c.CustomerID, c.City
from Employees e right join Customers c
on e.City = c.City
)
select distinct city
from CTE 
where CTE.EmployeeID is null 

--3.List all products and their total order quantities throughout all orders.
select p.ProductName, sum(od.Quantity) as TotalNumber
from Products p 
inner join [Order Details] od on p.ProductID = od.ProductID
inner join Orders o on od.OrderID = o.OrderID
group by  p.ProductName

--4.List all Customer Cities and total products ordered by that city.
select c.City, dt.TotalOrders   
from Customers c left join
(select count(orderid) as 'TotalOrders', CustomerId from orders
group by CustomerId ) dt
on c.CustomerID = dt.CustomerID

--5.List all Customer Cities that have at least two customers.
--a.Use union
select City, COUNT(CustomerID) as CustomerNumber
from Customers
group by City
Having COUNT(CustomerID) >=2

--b.Use sub-query and no union
select city, CustomerNumber
from 
(select City, COUNT(CustomerID) as CustomerNumber
from Customers
group by City)dt
where CustomerNumber >=2

--6.List all Customer Cities that have ordered at least two different kinds of products.
select c.City, count(distinct p.ProductID)as NumberProduct
from Products p 
inner join [Order Details] od on p.ProductID = od.ProductID
inner join Orders o on od.OrderID = o.OrderID
inner join Customers c on o.CustomerID = c.CustomerID
group by c.City
Having count(distinct p.ProductID)>=2

--7.List all Customers who have ordered products, but have the ‘ship city’ on the order different from their own customer cities.
select distinct c.CustomerID
from Customers c inner join Orders o on c.CustomerID = o.CustomerID
where c.City != o.ShipCity

--8.List 5 most popular products, their average price, and the customer city that ordered most quantity of it.
select * from
(select dt.ProductName, dt.City,
dense_rank() over(order by dt.TotalOrders desc) rnk
from
(select p.ProductName, c.City, sum(od.Quantity) as TotalOrders
from Products p 
inner join [Order Details] od on p.ProductID = od.ProductID
inner join Orders o on od.OrderID = o.OrderID
inner join Customers c on o.CustomerID = c.CustomerID
group by p.ProductName, c.City)dt)dt2
where rnk <=5

--9.List all cities that have never ordered something but we have employees there.
--a.Use sub-query
select *
from
(select e.City as employeescity, o.ShipCity as ordercity
from Employees e left join Orders o on e.City = o.ShipCity)dt
where ordercity is null

--b.Do not use sub-query
with CTE as
(
select e.City as employeescity, o.ShipCity as ordercity
from Employees e left join Orders o on e.City = o.ShipCity
)
select * from CTE
where ordercity is null

--10.List one city, if exists, that is the city from where the employee sold most orders (not the product quantity) is, and also the city of most total quantity of products ordered from. (tip: join  sub-query)
select* from(
select *, DENSE_RANK()over(order by dt.totalorder ) as rnk
from(
select od.ProductID, o.ShipCity, o.EmployeeID ,sum(od.Quantity) as totalorder
from [Order Details] as od inner join Orders o on o.OrderID = od.OrderID
group by od.ProductID,o.ShipCity, o.EmployeeID )dt)dt2
where dt2.rnk = 1

--11.How do you remove the duplicates record of a table?
--using Group By and having clause
--using Common Table Expressions (CTE)
--Using RANK function to SQL delete duplicate rows
--Using a unique index

--12.Employee ( empid integer, mgrid integer, deptid integer, salary integer) 
--Dept (deptid integer, deptname text) Find employees who do not manage anybody.
Select empid, deptid, mgrid
from Employee 
where mgrid is null

--13.Find departments that have maximum number of employees. (solution should consider scenario having more than 1 departments that have maximum number of employees). Result should only have - deptname, count of employees sorted by deptname.
select dt2.deptid, dt2.TotalNumber
from(
select *, rank()over(order by TotalNumber) as rnk
from 
(select e.deptid, d.deptname, count(e.empid) as TotalNumber
from dept d inner join Employee e on d.depid = e.depid
group by e.deptid, d.deptname)dt)dt2
where dt2.rnk = 1

--14.Find top 3 employees (salary based) in every department. Result should have deptname, empid, salary sorted by deptname and then employee with high to low salary.
select* from(
select d.deptname,e.empid,e.salary,
rank()over(partition by d.depid order by e.salary) as rnk
from dept d inner join Employee e on d.depid = e.depid)dt
where dt.rnk <=3